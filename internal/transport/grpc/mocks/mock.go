// Code generated by MockGen. DO NOT EDIT.
// Source: internal/transport/grpc/handlers/product.go

// Package mock_grpcHandler is a generated GoMock package.
package mock_grpcHandler

import (
	context "context"
	reflect "reflect"

	core "github.com/ernur-eskermes/product-store/internal/core"
	filters "github.com/ernur-eskermes/product-store/pkg/filters"
	gomock "github.com/golang/mock/gomock"
)

// MockProductService is a mock of ProductService interface.
type MockProductService struct {
	ctrl     *gomock.Controller
	recorder *MockProductServiceMockRecorder
}

// MockProductServiceMockRecorder is the mock recorder for MockProductService.
type MockProductServiceMockRecorder struct {
	mock *MockProductService
}

// NewMockProductService creates a new mock instance.
func NewMockProductService(ctrl *gomock.Controller) *MockProductService {
	mock := &MockProductService{ctrl: ctrl}
	mock.recorder = &MockProductServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductService) EXPECT() *MockProductServiceMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockProductService) GetAll(ctx context.Context, f *filters.Filters) ([]core.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, f)
	ret0, _ := ret[0].([]core.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockProductServiceMockRecorder) GetAll(ctx, f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockProductService)(nil).GetAll), ctx, f)
}

// GetCSVProducts mocks base method.
func (m *MockProductService) GetCSVProducts(ctx context.Context, url string) ([]core.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCSVProducts", ctx, url)
	ret0, _ := ret[0].([]core.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCSVProducts indicates an expected call of GetCSVProducts.
func (mr *MockProductServiceMockRecorder) GetCSVProducts(ctx, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCSVProducts", reflect.TypeOf((*MockProductService)(nil).GetCSVProducts), ctx, url)
}

// GetTotalRecords mocks base method.
func (m *MockProductService) GetTotalRecords(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalRecords", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalRecords indicates an expected call of GetTotalRecords.
func (mr *MockProductServiceMockRecorder) GetTotalRecords(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalRecords", reflect.TypeOf((*MockProductService)(nil).GetTotalRecords), ctx)
}

// UpdateOrCreate mocks base method.
func (m *MockProductService) UpdateOrCreate(ctx context.Context, products []core.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrCreate", ctx, products)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrCreate indicates an expected call of UpdateOrCreate.
func (mr *MockProductServiceMockRecorder) UpdateOrCreate(ctx, products interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrCreate", reflect.TypeOf((*MockProductService)(nil).UpdateOrCreate), ctx, products)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/product.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	http "net/http"
	reflect "reflect"

	core "github.com/ernur-eskermes/product-store/internal/core"
	filters "github.com/ernur-eskermes/product-store/pkg/filters"
	gomock "github.com/golang/mock/gomock"
)

// MockProductStorage is a mock of ProductStorage interface.
type MockProductStorage struct {
	ctrl     *gomock.Controller
	recorder *MockProductStorageMockRecorder
}

// MockProductStorageMockRecorder is the mock recorder for MockProductStorage.
type MockProductStorageMockRecorder struct {
	mock *MockProductStorage
}

// NewMockProductStorage creates a new mock instance.
func NewMockProductStorage(ctrl *gomock.Controller) *MockProductStorage {
	mock := &MockProductStorage{ctrl: ctrl}
	mock.recorder = &MockProductStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductStorage) EXPECT() *MockProductStorageMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockProductStorage) GetAll(ctx context.Context, f *filters.Filters) ([]core.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, f)
	ret0, _ := ret[0].([]core.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockProductStorageMockRecorder) GetAll(ctx, f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockProductStorage)(nil).GetAll), ctx, f)
}

// GetTotalRecords mocks base method.
func (m *MockProductStorage) GetTotalRecords(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalRecords", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalRecords indicates an expected call of GetTotalRecords.
func (mr *MockProductStorageMockRecorder) GetTotalRecords(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalRecords", reflect.TypeOf((*MockProductStorage)(nil).GetTotalRecords), ctx)
}

// UpdateOrCreate mocks base method.
func (m *MockProductStorage) UpdateOrCreate(ctx context.Context, products []core.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrCreate", ctx, products)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrCreate indicates an expected call of UpdateOrCreate.
func (mr *MockProductStorageMockRecorder) UpdateOrCreate(ctx, products interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrCreate", reflect.TypeOf((*MockProductStorage)(nil).UpdateOrCreate), ctx, products)
}

// MockHttpClient is a mock of HttpClient interface.
type MockHttpClient struct {
	ctrl     *gomock.Controller
	recorder *MockHttpClientMockRecorder
}

// MockHttpClientMockRecorder is the mock recorder for MockHttpClient.
type MockHttpClientMockRecorder struct {
	mock *MockHttpClient
}

// NewMockHttpClient creates a new mock instance.
func NewMockHttpClient(ctrl *gomock.Controller) *MockHttpClient {
	mock := &MockHttpClient{ctrl: ctrl}
	mock.recorder = &MockHttpClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHttpClient) EXPECT() *MockHttpClientMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockHttpClient) Do(req *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockHttpClientMockRecorder) Do(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockHttpClient)(nil).Do), req)
}
